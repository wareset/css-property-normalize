{"code":"export const cssPropertyNormalize = (() => {\r\n    const test = (regexp, value) => regexp.test(value);\r\n    const replace = (s, r, p = '') => s.replace(r, p);\r\n    const toLowerCase = (s) => s.toLowerCase();\r\n    const slice = (s, n1, n2) => s.slice(n1, n2);\r\n    const split = (s, r) => s.split(r);\r\n    const PREFIXES = ['webkit', 'moz', 'ms', 'o'];\r\n    const REG_CHECK = /^(?:--|-(?:webkit|moz|ms|o)-)?[a-z\\d]+(?:-[a-z\\d]+)*$/, REG_2 = /.*?(\\w+|--?|$).*/, REG_3 = /.*?(\\w+|$).*/;\r\n    const DASH = '-';\r\n    const DOUBLE_DASH = DASH + DASH;\r\n    const prefixy = (v) => test(/^(webkit|moz|ms|o)-/, v) ? DASH + v : v;\r\n    const lowerty = (prop, tmp) => (!test(REG_CHECK, prop) &&\r\n        (tmp = split(replace(prop, /((?<!\\w)\\w|[^a-z\\d]+)/g, '|$1'), /[^-a-z\\d]/i)\r\n            .filter((v) => v)\r\n            .map((v, k) => toLowerCase(replace(v, !k ? REG_2 : REG_3, '$1')))\r\n            .filter((v) => v)) &&\r\n        prefixy((tmp[0][0] === DASH ? tmp.shift() : '') + tmp.join(DASH))) ||\r\n        prop;\r\n    const PROPERTY_LIST = {};\r\n    (() => {\r\n        try {\r\n            const COMPUTEDS = window.getComputedStyle(window.document.body);\r\n            /* eslint-disable guard-for-in */\r\n            for (const key in COMPUTEDS) {\r\n                PROPERTY_LIST[lowerty(test(/\\d/, key[0]) ? COMPUTEDS[key] : key)] = 1;\r\n            }\r\n            /* eslint-enable guard-for-in */\r\n        }\r\n        catch (e) {\r\n            /**/\r\n        }\r\n    })();\r\n    const CACHE = {};\r\n    const resDefault = (prop) => CACHE[prop] ||\r\n        (CACHE[prop] =\r\n            ((prop = lowerty(prop)) &&\r\n                (prop in PROPERTY_LIST || prop[0] + prop[1] === DOUBLE_DASH) &&\r\n                prop) ||\r\n                ((prop = replace(prop, /^-\\w+-/, '')) &&\r\n                    PREFIXES.some((v, _) => (_ = DASH + v + DASH + prop) in PROPERTY_LIST && (prop = _)) &&\r\n                    prop) ||\r\n                prop);\r\n    const CACHE_CAMELCASE = {};\r\n    const camelly = (prop) => (prop = split(prop, /[^a-z\\d]/i)\r\n        .map((v) => v && v[0].toUpperCase() + toLowerCase(slice(v, 1)))\r\n        .join('')) && toLowerCase(prop[0]) + slice(prop, 1);\r\n    const resCamelly = (prop) => CACHE_CAMELCASE[prop] || (CACHE_CAMELCASE[prop] = camelly(resDefault(prop)));\r\n    return (prop, toCamelCase = false) => toCamelCase ? resCamelly(prop) : resDefault(prop);\r\n})();\r\nexport default cssPropertyNormalize;\r\n","references":[]}
